//
// Created by 白杰 on 2024/4/22.
//

#ifndef MYSQL_REPLICATER_PACKET_H
#define MYSQL_REPLICATER_PACKET_H

#include <vector>
#include <string>
#include <netinet/in.h>

using namespace std;



class Packet {
public:
    Packet();
    int Init();
    int Parser_packet(unsigned char *);
    int Parser_packet_test(char *);
};

struct mysql_conn_info {
    int fd;
    string connName;
    struct sockaddr_in serverAddr;
};

struct mysql_plugin_name {
    const char * cachingSha2Password;
    const char * mysqlOldPassword;
    const char * mysqlClearPassword;
    const char * mysqlNativePassword;
    const char * sha256Password;
};


struct mysql_server_info_data {
    unsigned char ProtocolVersion; // 1
    vector<unsigned char> ServerVersion;
    vector<unsigned char> ServerThreadID; // 4
//    vector<unsigned char> ServerAuthDataPart1; // 8
    string ServerAuthDataPart1; // 8
    string ServerAuthDataPart; // 8
    string ServerAuthDataPartAll; // 8
    vector<unsigned char> Filler; // 1 0x00
    vector<unsigned char> CapabilityFlags1; // 2
    uint32_t CapabilityFlags3; // 2
    uint32_t CapabilityFlagsAll1[2]; // 2
    uint32_t CapabilityFlagsAll2[2]; // 2
    vector<uint32_t> CapabilityFlags; // 2
    uint8_t CharacterSet; // 1
    vector<unsigned char> ServerStatus; // 2
    uint16_t ServerStatus1;
    vector<unsigned char> CapabilityFlags2; // 2
    unsigned char AuthPluginDataLen;
//            if capabilities & CLIENT_PLUGIN_AUTH {
//                    int<1>	auth_plugin_data_len	length of the combined auth_plugin_data (scramble), if auth_plugin_data_len is > 0
//            } else {
//                int<1>	00	constant 0x00
//            }
    unsigned char * AuthPluginDataLenOr0x00; // 1
    unsigned char * Reserved; // all 0x00 10
    vector<unsigned char> ServerAuthDataPart2;
//    string ServerAuthDataPart;
//            if capabilities & CLIENT_PLUGIN_AUTH {
//                    NULL	auth_plugin_name	name of the auth_method that the auth_plugin_data belongs to
//            }
//    vector<unsigned char> AuthPluginName;
    string AuthPluginName;
};

struct mysql_server_info {
    // 报文头
    int ProtocolLen; // 3
    int SeqID; // 1
    unsigned char *PacketBody;
    struct mysql_server_info_data MySQLServInfoData;
};



struct mysql_client_send_info_data {
//    unsigned char CapabilityFlags1[2];
    uint32_t CapabilityFlags1[4];
    uint32_t CapabilityFlags2;
//    uint8_t CapabilityFlags2[4];
    uint8_t MaxPacketLen[4];
    uint8_t CharacterSet[1];
    uint8_t Filler[23]; // all 0x00
    string UserName;
    uint8_t Filler1;
    uint8_t AuthRespLen;
    uint8_t AuthRespSHA1[20];
    uint8_t AuthRespSHA256[32];
    vector<unsigned char> AuthRespSHA;
    unsigned char *AuthResp;
    string DataBaseName;
    string ClientPluginName;
    uint8_t CapabilityFlagsAll1[2]; // 2
    uint8_t CapabilityFlagsAll2[2]; // 2
    uint32_t CapabilityFlagsAll; // 4


//    if capabilities & CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA {
//            string<length>	auth_response	opaque authentication response data generated by Authentication Method indicated by the plugin name field.
//    } else {
//        int<1>	auth_response_length	length of auth_response
//        string<length>	auth_response	opaque authentication response data generated by Authentication Method indicated by the plugin name field.
//    }
//    if capabilities & CLIENT_CONNECT_WITH_DB {
//            string<NUL>	database	initial database for the connection. This string should be interpreted using the character set indicated by character set field.
//    }
//    if capabilities & CLIENT_PLUGIN_AUTH {
//            string<NUL>	client_plugin_name	the Authentication Method used by the client to generate auth-response value in this packet. This is an UTF-8 string.
//    }
//    if capabilities & CLIENT_CONNECT_ATTRS {
//            int<lenenc>	length of all key-values	affected rows
//            string<lenenc>	key1	Name of the 1st client attribute
//            string<lenenc>	value1	Value of the 1st client attribute
//            .. (if more data in length of all key-values, more keys and values parts)
//    }
//    if capabilities & CLIENT_ZSTD_COMPRESSION_ALGORITHM {
//            int<1>	zstd_compression_level	compression level for zstd compression algorithm
//    }


};

struct mysql_client_send_info {
    // 报文头
    int ProtocolLen; // 3
    int SeqID; // 1
    vector<char> PacketBody;
    uint8_t * Data;
    int32_t DataLen;
    struct mysql_client_send_info_data MySQLClientSendInfoData;
};



//struct mysql_client_send_command_data {
//    unsigned char COM_SLEEP[1];
//    unsigned char COM_QUIT[1];
//    unsigned char COM_INIT_DB[1];
//    unsigned char COM_QUERY[1];
//    unsigned char COM_FIELD_LIST[1];
//    unsigned char COM_CREATE_DB[1];
//    unsigned char COM_DROP_DB[1];
//    unsigned char COM_REFRESH[1];
//    unsigned char COM_SHUTDOWN[1];
//    unsigned char COM_STATISTICS[1];
//    unsigned char COM_PROCESS_INFO[1];
//    unsigned char COM_CONNECT[1];
//    unsigned char COM_PROCESS_KILL[1];
//    unsigned char COM_DEBUG[1];
//    unsigned char COM_PING[1];
//    unsigned char COM_DELAYED_INSERT[1];
//    unsigned char COM_CHANGE_USER[1];
//    unsigned char COM_BINLOG_DUMP[1]; // 0x12
//    unsigned char COM_TABLE_DUMP[1];
//    unsigned char COM_CONNECT_OUT[1];
//    unsigned char COM_REGISTER_SLAVE[1]; // 0x15
//    unsigned char COM_STMT_PREPARE[1];
//    unsigned char COM_STMT_EXECUTE[1];
//    unsigned char COM_STMT_SEND_LONG_DATA[1];
//    unsigned char COM_STMT_CLOSE[1];
//    unsigned char COM_STMT_RESET[1];
//    unsigned char COM_SET_OPTION[1];
//    unsigned char COM_STMT_FETCH[1];
//};

struct mysql_client_send_command {
    // 报文头
    uint8_t ProtocolLen[4]; // 3
    uint8_t SeqID[1]; // 1
    unsigned char * PacketBody;
//    struct mysql_client_send_command_data MySQLClientSendCommandData;
};





struct status_flags {
    unsigned char * SERVER_STATUS_IN_TRANS;	// 0x0001
    unsigned char * SERVER_STATUS_AUTOCOMMIT;	// 0x0002
    unsigned char * SERVER_MORE_RESULTS_EXISTS;	// 0x0008
    unsigned char * SERVER_STATUS_NO_GOOD_INDEX_USED;	// 0x0010
    unsigned char * SERVER_STATUS_NO_INDEX_USED;	// 0x0020
    unsigned char * SERVER_STATUS_CURSOR_EXISTS;	// 0x0040
    unsigned char * SERVER_STATUS_LAST_ROW_SENT;	// 0x0080
    unsigned char * SERVER_STATUS_DB_DROPPED;	// 0x0100
    unsigned char * SERVER_STATUS_NO_BACKSLASH_ESCAPES;	// 0x0200
    unsigned char * SERVER_STATUS_METADATA_CHANGED;	// 0x0400
    unsigned char * SERVER_QUERY_WAS_SLOW;	// 0x0800
    unsigned char * SERVER_PS_OUT_PARAMS;	// 0x1000
    unsigned char * SERVER_STATUS_IN_TRANS_READONLY;	// 0x2000
    unsigned char * SERVER_SESSION_STATE_CHANGED;	// 0x4000

};
struct mysql_OK_packet_data {
    int Header; // 00
    int AffectedRows;
    int LastInsertID;
//            if capabilities & CLIENT_PROTOCOL_41 {
//                    int<2>	status_flags	Status Flags
//                    int<2>	warnings	number of warnings
//            }elseif capabilities & CLIENT_TRANSACTIONS {
//                int<2>	status_flags	Status Flags
//            }
//            if capabilities & CLIENT_SESSION_TRACK {
//                    unsigned char *	info	human readable status information
//                    if status_flags & SERVER_SESSION_STATE_CHANGED
//                    unsigned char *	session_state_changes	session state info
//            }
//        } else {
//            unsigned char *	info	human readable status information
//        }
//    int StatusFlags1;
    struct status_flags MySQLStatusFlags;
    int Warnings;
//    int StatusFlags2;
    unsigned char * Info;
    unsigned char * SessionStateChanges;
};
struct mysql_OK_packet {
    // 报文头
    int ProtocolLen; // 3
    int SeqID; // 1
    unsigned char * PacketBody;
    struct mysql_OK_packet_data MySQLOKPacketData;

};


struct mysql_ERR_packet_data {
    int Header;
    int ErrorCode;
    unsigned char * SqlStateMarker;
    unsigned char * SqlState;
    unsigned char * ErrorMessage;
};


struct mysql_ERR_packet {
//        int<1>	header	0xFF ERR packet header
//        int<2>	error_code	error-code
//        if capabilities & CLIENT_PROTOCOL_41 {
//                unsigned char *[1]	sql_state_marker	# marker of the SQL state
//                unsigned char *[5]	sql_state	SQL state
//        }
//        unsigned char *<EOF>	error_message	human readable error message
// 报文头
    int ProtocolLen; // 3
    int SeqID; // 1
    unsigned char * PacketBody;
    struct mysql_ERR_packet_data MySQLERRPacketData;
};

struct mysql_EOF_packet_data {
    uint8_t Header;
    uint16_t Warnings;
    uint16_t StatusFlags;
};
struct mysql_EOF_Auth_Switch_data {
    uint8_t Header;
    string PluginName;
    string Scramble;
};
struct mysql_EOF_packet {
//        int<1>	header	0xFE EOF packet header
//        if capabilities & CLIENT_PROTOCOL_41 {
//                int<2>	warnings	number of warnings
//                int<2>	status_flags	SERVER_STATUS_flags_enum
    int ProtocolLen; // 3
    int SeqID; // 1
    unsigned char * PacketBody;
    struct mysql_EOF_packet_data MySQLEOFPacketData;
    struct mysql_EOF_Auth_Switch_data MySQLEOFAuthSwitchData;
};
#endif //MYSQL_REPLICATER_PACKET_H